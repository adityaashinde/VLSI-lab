FA :


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;



entity faddr is
    Port ( x : in  STD_LOGIC;
           y : in  STD_LOGIC;
           z : in  STD_LOGIC;
           sf : out  STD_LOGIC;
           fc : out  STD_LOGIC);
end faddr;

architecture Behavioral of faddr is

component HA is
Port(A,B : in STD_LOGIC;
     S,C : out STD_LOGIC);
end component;

component OrGate is
Port(d,e : in STD_LOGIC;
     o : out STD_LOGIC);
end component;

signal S0,S1,S2:STD_LOGIC;

begin

U1:HA PORT MAP(A=>x,B=>y,S=>S0,C=>S1);
U2:HA PORT MAP(A=>S0,B=>z,S=>Sf,C=>S2);
U3:OrGate Port Map(d=>s1,e=>s2,o=>fc);



end Behavioral;





----------- FA TESTBENCH :


LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
ENTITY FA IS
END FA;
 
ARCHITECTURE behavior OF FA IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT faddr
    PORT(
         x : IN  std_logic;
         y : IN  std_logic;
         z : IN  std_logic;
         sf : OUT  std_logic;
         fc : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal x : std_logic := '0';
   signal y : std_logic := '0';
   signal z : std_logic := '0';

 	--Outputs
   signal sf : std_logic;
   signal fc : std_logic;
	
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: faddr PORT MAP (
          x => x,
          y => y,
          z => z,
          sf => sf,
          fc => fc
        );
 

   -- Stimulus process
   stim_proc: process
   begin	

	x<='0';
	y<='0';
	z<='0';	
      -- hold reset state for 100 ns.
      wait for 100 ns;
		x<='0';
		y<='0';
		z<='1';

      wait for 100 ns;
		x<='0';
		y<='0';
		z<='1';

      wait for 100 ns;
		x<='0';
		y<='1';
		z<='0';

      wait for 100 ns;
		x<='0';
		y<='1';
		z<='1';

      wait for 100 ns;
		x<='1';
		y<='0';
		z<='0';

      wait for 100 ns;
		x<='1';
		y<='0';
		z<='1';

      wait for 100 ns;
		x<='1';
		y<='1';
		z<='0';

      wait for 100 ns;
		x<='1';
		y<='1';
		z<='1';		

      wait;
   end process;

END;


